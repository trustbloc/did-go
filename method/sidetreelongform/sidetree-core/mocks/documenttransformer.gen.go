// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/did-go/method/sidetreelongform/sidetree-core/api/protocol"
	"github.com/trustbloc/did-go/method/sidetreelongform/sidetree-core/document"
)

type DocumentTransformer struct {
	TransformDocumentStub        func(*protocol.ResolutionModel, protocol.TransformationInfo) (*document.ResolutionResult, error)
	transformDocumentMutex       sync.RWMutex
	transformDocumentArgsForCall []struct {
		arg1 *protocol.ResolutionModel
		arg2 protocol.TransformationInfo
	}
	transformDocumentReturns struct {
		result1 *document.ResolutionResult
		result2 error
	}
	transformDocumentReturnsOnCall map[int]struct {
		result1 *document.ResolutionResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DocumentTransformer) TransformDocument(arg1 *protocol.ResolutionModel, arg2 protocol.TransformationInfo) (*document.ResolutionResult, error) {
	fake.transformDocumentMutex.Lock()
	ret, specificReturn := fake.transformDocumentReturnsOnCall[len(fake.transformDocumentArgsForCall)]
	fake.transformDocumentArgsForCall = append(fake.transformDocumentArgsForCall, struct {
		arg1 *protocol.ResolutionModel
		arg2 protocol.TransformationInfo
	}{arg1, arg2})
	fake.recordInvocation("TransformDocument", []interface{}{arg1, arg2})
	fake.transformDocumentMutex.Unlock()
	if fake.TransformDocumentStub != nil {
		return fake.TransformDocumentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.transformDocumentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DocumentTransformer) TransformDocumentCallCount() int {
	fake.transformDocumentMutex.RLock()
	defer fake.transformDocumentMutex.RUnlock()
	return len(fake.transformDocumentArgsForCall)
}

func (fake *DocumentTransformer) TransformDocumentCalls(stub func(*protocol.ResolutionModel, protocol.TransformationInfo) (*document.ResolutionResult, error)) {
	fake.transformDocumentMutex.Lock()
	defer fake.transformDocumentMutex.Unlock()
	fake.TransformDocumentStub = stub
}

func (fake *DocumentTransformer) TransformDocumentArgsForCall(i int) (*protocol.ResolutionModel, protocol.TransformationInfo) {
	fake.transformDocumentMutex.RLock()
	defer fake.transformDocumentMutex.RUnlock()
	argsForCall := fake.transformDocumentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *DocumentTransformer) TransformDocumentReturns(result1 *document.ResolutionResult, result2 error) {
	fake.transformDocumentMutex.Lock()
	defer fake.transformDocumentMutex.Unlock()
	fake.TransformDocumentStub = nil
	fake.transformDocumentReturns = struct {
		result1 *document.ResolutionResult
		result2 error
	}{result1, result2}
}

func (fake *DocumentTransformer) TransformDocumentReturnsOnCall(i int, result1 *document.ResolutionResult, result2 error) {
	fake.transformDocumentMutex.Lock()
	defer fake.transformDocumentMutex.Unlock()
	fake.TransformDocumentStub = nil
	if fake.transformDocumentReturnsOnCall == nil {
		fake.transformDocumentReturnsOnCall = make(map[int]struct {
			result1 *document.ResolutionResult
			result2 error
		})
	}
	fake.transformDocumentReturnsOnCall[i] = struct {
		result1 *document.ResolutionResult
		result2 error
	}{result1, result2}
}

func (fake *DocumentTransformer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.transformDocumentMutex.RLock()
	defer fake.transformDocumentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DocumentTransformer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protocol.DocumentTransformer = new(DocumentTransformer)
